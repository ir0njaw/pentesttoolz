import socket
import re
from ssl import wrap_socket, CERT_NONE, PROTOCOL_SSLv23
from ssl import SSLContext  # Modern SSL?
from ssl import HAS_SNI  # Has SNI?
from argparse import ArgumentParser

from pprint import pprint
parser = ArgumentParser()
parser.add_argument("-t", dest="url", help="Target URL")
parser.add_argument("-f", dest="file", help="C:\ folder\ name.txt ")
parser.add_argument("-e", dest="EXAMPLE", help="python sslparser.py -t google.com -f C:\folder\name.txt")
args = parser.parse_args()

def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,
                    ca_certs=None, server_hostname=None,
                    ssl_version=None):
    context = SSLContext(ssl_version)
    context.verify_mode = cert_reqs

    if ca_certs:
        try:
            context.load_verify_locations(ca_certs)
        # Py32 raises IOError   
        # Py33 raises FileNotFoundError
        except Exception as e:  # Reraise as SSLError
            raise SSLError(e)

    if certfile:
        # FIXME: This block needs a test.
        context.load_cert_chain(certfile, keyfile)

    if HAS_SNI:  # Platform-specific: OpenSSL with enabled SNI
        return (context, context.wrap_socket(sock, server_hostname=server_hostname))

    return (context, context.wrap_socket(sock))

with open(r"C:\Python33\big.txt", "r") as f:
    c= f.read()
    #print(c)
    pat= re.sub("\n"," ",c)
    #print(pat)
    x= c.split()
    #print (x[0])
i=0
while(i < len(x)):
    hostname = 'www.'+x[i]+'.' + args.url
    i +=1
    print("Hostname: %s" % (hostname))
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((hostname, 443))
        (context, ssl_socket) = ssl_wrap_socket(s,
                                               ssl_version=2, 
                                               cert_reqs=2, 
                                               ca_certs='C:\Python33\cacert.pem', 
                                               server_hostname=hostname)
        res = pprint(ssl_socket.getpeercert())
        with open(args.file, "a") as f:    
            f.write(hostname +"\n" )
            print(ssl_socket.getpeercert(), file=f)
            print("////////////////////////////////////////////////////////////////\n",file=f)
            f.close() 

            s.close()
    except:
        print('Null')